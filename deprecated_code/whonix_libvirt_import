#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -o pipefail

error_handler() {
   local exit_code="$?"
   local MSG="\
###############################################################################
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## exit_code: $exit_code
###############################################################################\
"
}

trap "error_handler" ERR

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
scriptname="$(basename "$BASH_SOURCE")"
[ -n "$tempfolder" ] || tempfolder="$(mktemp --directory)"

colors() {
   trap "error_handler" ERR

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/037
   ## Variables for terminal requests.
   [[ -t 2 ]] && {
      alt=$(      tput smcup  || tput ti      ) # Start alt display
      ealt=$(     tput rmcup  || tput te      ) # End   alt display
      hide=$(     tput civis  || tput vi      ) # Hide cursor
      show=$(     tput cnorm  || tput ve      ) # Show cursor
      save=$(     tput sc                     ) # Save cursor
      load=$(     tput rc                     ) # Load cursor
      bold=$(     tput bold   || tput md      ) # Start bold
      stout=$(    tput smso   || tput so      ) # Start stand-out
      estout=$(   tput rmso   || tput se      ) # End stand-out
      under=$(    tput smul   || tput us      ) # Start underline
      eunder=$(   tput rmul   || tput ue      ) # End   underline
      reset=$(    tput sgr0   || tput me      ) # Reset cursor
      blink=$(    tput blink  || tput mb      ) # Start blinking
      italic=$(   tput sitm   || tput ZH      ) # Start italic
      eitalic=$(  tput ritm   || tput ZR      ) # End   italic
      [[ $TERM != *-m ]] && {
      red=$(      tput setaf 1|| tput AF 1    )
      green=$(    tput setaf 2|| tput AF 2    )
      yellow=$(   tput setaf 3|| tput AF 3    )
      blue=$(     tput setaf 4|| tput AF 4    )
      magenta=$(  tput setaf 5|| tput AF 5    )
      cyan=$(     tput setaf 6|| tput AF 6    )
      }
      white=$(    tput setaf 7|| tput AF 7    )
      default=$(  tput op                     )
      eed=$(      tput ed     || tput cd      )   # Erase to end of display
      eel=$(      tput el     || tput ce      )   # Erase to end of line
      ebl=$(      tput el1    || tput cb      )   # Erase to beginning of line
      ewl=$eel$ebl                                # Erase whole line
      draw=$(     tput -S <<< '   enacs
                                      smacs
                                      acsc
                                      rmacs' || { \
                      tput eA; tput as;
                      tput ac; tput ae;         } )   # Drawing characters
      back=$'\b'
   } 2>/dev/null ||:
}

check_tools_installed() {
   trap "error_handler" ERR

   [ -n "$tools_list" ] || tools_list="cp grep sed mktemp virsh"

   for tool in $tools_list; do
      command_v_tool_exit_code="0"
      command -v virsh >/dev/null 2>&1 || { command_v_tool_exit_code="$?" ; true; };
      if [ ! "$command_v_tool_exit_code" = "0" ]; then
         echo "${green}INFO${reset}: Tool $tool not installed."
         echo "${cyan}QUESTION${reset}: Try to install $tool?"
         ## TODO
         echo "${red}TODO${reset}"
         exit 1
      fi
   fi
}

parse_files() {
   trap "error_handler" ERR

   for item in "$MYDIR/"*; do
      ## Ignore folders.
      if [ -d "$item" ]; then
         continue
      fi
      base_name="$(basename "$item")"
      ## Ignore this script itself.
      if [ "$base_name" = "$scriptname" ]; then
         continue
      fi
      local file_extension
      file_extension="${base_name##*.}"
      if [ "$base_name" = "whonix_network.xml" ]; then
         continue
      fi
      if [ "$file_extension" = "xml" ]; then
         source_xml="$item"

         ## Searching for:
         ## <name>Whonix-Gateway</name>
         [ -n "$source_domain_name" ] || source_domain_name="$(grep -oP '(?<=<name>).*(?=</name)' "$source_xml")"
         ## Example source_domain_name:
         ## Whonix-Gateway

         ## Searching for:
         ## <source file='/var/lib/libvirt/images/Whonix-Gateway.qcow2'/>
         [ -n "$vm_source_image" ] || vm_source_image="$(grep -oP "(?<=<source file=').*(?='/>)" "$source_xml")"
         ## Example vm_source_image:
         ## /var/lib/libvirt/images/Whonix-Gateway.qcow2

         continue
      fi
      [ -n "$version_number" ] || version_number="$(echo "$base_name" | grep -Eo '[0-9]+\.[0-9]+')"
      [ -n "$vm_source_image" ] || vm_source_image="$item"
      [ -n "$vm_source_image_extension" ] || vm_source_image_extension="${vm_source_image##*.}"
   done
}

get_target_domain_type() {
   trap "error_handler" ERR

   while true; do
      if [ ! "$target_domain_type" = "" ]; then
         echo "${green}INFO${reset}: domain type is $target_domain_type."
         break
      fi
      echo "\
${cyan}QUESTION${reset}: Which domain type do you want to use?

Press enter to use the default (kvm).

Other options. Type either:
${under}kvm${eunder}
or
${under}qemu${eunder}
then press enter."
      read target_domain_type
      if [ "$target_domain_type" = "" ]; then
         target_domain_type="kvm"
      fi
   done
}

validate_target_domain_type() {
   trap "error_handler" ERR

   if [ "$target_domain_type" = "kvm" ] || [ "$target_domain_type" = "qemu" ]; then
      return 0
   fi
   echo "${red}ERROR${reset}: Invalid domain type. Must be either ${under}kvm${eunder} or ${under}qemu${eunder}." >&2
   exit 1
}

get_target_image_file_name() {
   trap "error_handler" ERR

   if [ "$target_domain_name" = "" ]; then
      echo "${red}ERROR${reset}: target_domain_name could not be detected. Aborted." >&2
      exit 1
   fi
   if [ "$version_number" = "" ]; then
      echo "${red}ERROR${reset}: version_number could not be detected. Aborted." >&2
      exit 1
   fi
   if [ "$target_domain_type" = "" ]; then
      echo "${red}ERROR${reset}: target_domain_type could not be detected. Aborted." >&2
      exit 1
   fi
   if [ "$vm_source_image_extension" = "" ]; then
      echo "${red}ERROR${reset}: vm_source_image_extension could not be detected. Aborted." >&2
      exit 1
   fi

   [ -n "$vm_image_target_dir" ] vm_image_target_dir="/var/lib/libvirt/images"
   [ -n "$vm_target_file_name" ] || vm_target_file_name="${source_domain_name}_${version_number}_${target_domain_type}.${vm_source_image_extension}"
   [ -n "$vm_target_image" ] || vm_target_image="$vm_image_target_dir/$vm_target_file_name"
}

get_target_domain_name() {
   trap "error_handler" ERR

   [ -n "$target_domain_name" ] || target_domain_name="${source_domain_name}_${version_number}_${target_domain_type}"
}

check_for_existing_domain() {
   trap "error_handler" ERR

   virsh_dominfo_exit_code="0"
   virsh dominfo "$target_domain_name" >/dev/null 2>&1 || { virsh_dominfo_exit_code="$?" ; true; };

   if [ "$virsh_dominfo_exit_code" = "0" ]; then
      echo "${red}ERROR${reset}: Domain name $target_domain_name already exists. Aborted." >&2
      exit 1
   fi
}

copy_xml_file_to_temp_folder() {
   trap "error_handler" ERR

   if [ "$source_xml" = "" ]; then
      echo "${red}ERROR${reset}: xml file could not be detected! Aborted." >&2
      exit 1
   fi
   if [ ! -f "$source_xml" ]; then
      echo "${red}ERROR${reset}: xml file $source_xml does not exist! Aborted." >&2
      exit 1
   fi

   cp "$source_xml" "$temp_xml"
}

change_domain_type_in_target_xml() {
   trap "error_handler" ERR

   local temp new
   temp="<domain type='kvm'>"
   new="<domain type='$target_domain_type'>"

   sed -i "s/$temp/$new/g" "$temp_xml"
}

change_domain_name_in_target_xml() {
   trap "error_handler" ERR

   local temp new
   temp="<name>$source_domain_name</name>"
   new="<name>$target_domain_name</name>"

   sed -i "s/$temp/$new/g" "$temp_xml"
}

change_image_file_in_target_xml() {
   trap "error_handler" ERR

   local temp new
   temp="<source file='$vm_source_image'/>"
   new="<source file='$vm_target_image'/>"

   sed -i "s/$temp/$new/g" "$temp_xml"
}

import_domain() {
   trap "error_handler" ERR

   ## Check, if there is a network configuration file in this scripts's folder.
   if [ -f "./whonix_network.xml" ]; then
      ## Import virtual isolated network and to set it to autostart.
      virsh net-define ./whonix_network.xml
      ## TODO: Fix next command.
      virsh net-autostart ./whonix_network.xml
   fi

   [ -n "$temp_xml" ] || temp_xml="$tempfolder/temp.xml"

   ## Import VM.
   virsh define "$temp_xml"
}

check_for_existing_image() {
   trap "error_handler" ERR

   if [ -f "$vm_target_file" ]; then
      echo "${red}ERROR${reset}: Image $vm_target_file already exists. Aborted." >&2
      exit 1
   fi
}

copy_image() {
   trap "error_handler" ERR

   mkdir --parents "/var/lib/libvirt/images"

   command_v_pv_exit_code="0"
   command -v pv >/dev/null 2>&1 || { command_v_pv_exit_code="$?" ; true; };

   echo "${green}INFO${reset}: Copying $vm_source_image to $vm_target_file..."
   if [ "$command_v_pv_exit_code" = "0" ]; then
      pv "$vm_source_image" > "$vm_target_file"
   else
      cp "$vm_source_image" "$vm_target_image"
   fi
   echo "${green}INFO${reset}: Copying done."
}

success() {
   trap "error_handler" ERR

   ## TODO: Better advice for user what to do next.
   echo "${green}INFO${reset}: Done." >&2
}

main_function() {
   trap "error_handler" ERR

   colors
   check_tools_installed
   parse_files
   get_target_domain_name
   get_target_image_file_name
   check_for_existing_domain
   check_for_existing_image
   get_target_domain_type
   validate_target_domain_type
   copy_xml_file_to_temp_folder
   change_domain_type_in_target_xml
   change_domain_name_in_target_xml
   change_image_file_in_target_xml
   import_domain
   copy_image
   success
}

main_function
