#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

# Removed code for various reasons.
# Subject for discussion about being readded.

# For extensive debugging use:
# sudo bash -x 2>/tmp/log TorBOX-Gateway
# This will set -x and redirect everything bash does to /tmp/log.
# nano /tmp/log

# Maximize Tor Browser windows.
#
# Out commented due to fingerprinting risks.
# Javascript is enabeld in Tor Browser by default and javascript
# can read the resolution.
#
# ( echo '/<applications>/a'; echo '<application class="Tor*" role="browser"> <maximized>yes</maximized> </application>'; echo '.'; echo 'wq') | sudo -u "$user_name" ed -s .config/openbox/rc.xml

# Win+Space shows Openbox menu.
#
# Out commented. We never advertised this feature and it's
# probably better if the user decides to activate it.
#
# ( echo '/<keyboard>/a'; echo '<keybind key="W-space"><action name="ShowMenu"><menu>root-menu</menu></action></keybind>'; echo '.'; echo 'wq') | sudo -u "$user_name" ed -s .config/openbox/rc.xml

# Fix ugly corners in tint2rc.
#
# Out commented. It's up to the user to decide which
# style settings to choose.
#
# sudo -u "$user_name" ed -s .config/tint2/tint2rc <<< $',s/rounded = 7/rounded = 0/g\nw'


# No longer deleting /var/lib/tor. We install but forbid to run software such as Tor we install.
# Therefore /var/lib/tor should be empty.
# Ensure to delete /var/lib/tor. It contains sensitive stuff like the Tor consensus and the Tor entry guards.
# rm -r /var/lib/tor/* || true

# Tor Borwser gpg verification

SOCKS_PORT_TBB_GPG="9116"
UWT_VAR="/usr/bin/uwt -t 5 -i "$GATEWAY_IP" -p "$SOCKS_PORT_TBB_GPG""
KEYSERVER="x-hkp://pool.sks-keyservers.net"

gpg_key_verification_error() {
trap "tb_error_handler" ERR

ZENITY_TYPE="--error"
output "\
ERROR: Could not verify GPG key.
ERROR: Tor Browser update failed! Try again later.\
"
progress_bar 100
exit 1
}

## Importing GPG keys...
debug "\
INFO: Importing GPG keys to the temporary directory gpgtmpdir...
INFO: The GPG keys will not be permanently added to your keyring.\
"
mkdir "gpgtmpdir"
chmod 700 "gpgtmpdir/"

## !!!VERIFY!!!
debug "\
INFO: Getting the GPG keys... Verify the fingerprints.
https://www.torproject.org/docs/signing-keys.html.en
http://idnxcnkne4qt76tg.onion/docs/signing-keys.html.en\
"

## !!!VERIFY!!!
debug "INFO: Getting Erinn Clark's GPG key..."
ERINN_FINGERPRINT="8738A680B84B3031A630F2DB416F061063FEE659"
debug "INFO: ERINN_FINGERPRINT: $ERINN_FINGERPRINT"
debug "INFO: You can ignore the libtorsocks warning about the DNS leak. See Design. There can be no DNS leaks."
$UWT_VAR /usr/bin/gpg \
--homedir gpgtmpdir --keyserver "$KEYSERVER" --recv "$ERINN_FINGERPRINT" || NETWORK_DOWN="1"

# Check if gpg failed.
if [ "$NETWORK_DOWN" = "1" ]; then
   ZENITY_TYPE="--error"
   output "Failed to fetch gpg key: "$ERINN_FINGERPRINT"
from keyserver: "$KEYSERVER"
Maybe the keyserver is down.

$DOWNLOAD_FAIL_HELP"
   progress_bar 100
   exit 1
fi

 ## !!!VERIFY!!!
debug "INFO: Getting Sebastian Hahn's GPG key..."
SEBASTIAN_FINGERPRINT="261C5FBE77285F88FB0C343266C8C2D7C5AA446D"
debug "INFO: SEBASTIAN_FINGERPRINT: $SEBASTIAN_FINGERPRINT"
debug "INFO: You can ignore the libtorsocks warning about the DNS leak. See Design. There can be no DNS leaks."
$UWT_VAR /usr/bin/gpg \
--homedir gpgtmpdir --keyserver "$KEYSERVER" --recv "$SEBASTIAN_FINGERPRINT" || NETWORK_DOWN="1"

# Check if gpg failed.
if [ "$NETWORK_DOWN" = "1" ]; then
   ZENITY_TYPE="--error"
   output "Failed to fetch gpg key: "$SEBASTIAN_FINGERPRINT"
from keyserver: "$KEYSERVER"
Maybe the keyserver is down.

$DOWNLOAD_FAIL_HELP"
   progress_bar 100
   exit 1
fi

## !!!VERIFY!!!
debug "INFO: Verifying Erinn Clark's GPG key..."
trap "gpg_key_verification_error" ERR
gpg --homedir "gpgtmpdir" --fingerprint "$ERINN_FINGERPRINT"
debug "INFO: Successfully verified Erinn Clark's GPG key."

## !!!VERIFY!!!
debug "INFO: Verifying Sebastian Hahn's GPG key..."
trap "gpg_key_verification_error" ERR
gpg --homedir "gpgtmpdir" --fingerprint "$SEBASTIAN_FINGERPRINT"
debug "INFO: Successfully verified Sebastian Hahn's GPG key."

# This assumes you rebooted after the last kernel update.
# Can not be used together with debootstrap!
# Not needed when using debootstrap.
#apt-get --config-file /usr/share/whonix/apt.conf --yes remove --purge $(dpkg -l|egrep '^ii  linux-(im|he)'|awk '{print $2}'|grep -v `uname -r`) || true

# This assumes you rebooted after the last kernel update.
# Can not be used together with debootstrap!
# Not needed when using debootstrap.
#apt-get --config-file /usr/share/whonix/apt.conf --yes remove --purge $(dpkg -l|egrep '^ii  linux-(im|he)'|awk '{print $2}'|grep -v `uname -r`) || true

config_home() {
trap "error_handler" ERR INT TERM

# Thanks to:
# https://bbs.archlinux.org/viewtopic.php?id=116451
# http://askubuntu.com/questions/98135/gnome-terminal-ignores-gtk-theme

# Fixing black on black for gnome-terminal.
# Thanks to: http://ubuntuforums.org/showthread.php?t=1513791
# Thanks to: https://gist.github.com/1397104
sudo -u "$user_name" gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_background" --type bool false
sudo -u "$user_name" gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_colors" --type bool false
sudo -u "$user_name" gconftool-2 --set "/apps/gnome-terminal/profiles/Default/foreground_color" --type string "#FFFFFFFFFFFF"
}

# Remove unnecessary packages to slim down the system.
# This list contains only packages, which waste space and are not required.
#apt-get --config-file /usr/share/whonix/apt.conf --yes remove --purge \
#vim vim-tiny vim-common ufw telnet tcpdump tasksel* strace ppp pppconfig \
#pppoeconf pciutils ntfs-3g mtr-tiny mlocate man-db manpages lshw libpci3 fuse-utils iso-codes \
#dosfstools logrotate aptitude || true

# No longer removing friendly-recovery. Quite useful in case disk got filled up
# and also errors on virtual disks happen sometimes.

# Remove unnecessary packages to slim down the system.
# This list contains only packages, which waste space and are not required.
#apt-get --yes remove --purge xserver-xorg-video-all xserver-xorg-video-ati xserver-xorg-video-fbdev \
#xserver-xorg-video-geode xserver-xorg-video-intel xserver-xorg-video-mach64 xserver-xorg-video-mga \
#xserver-xorg-video-neomagic xserver-xorg-video-nouveau xserver-xorg-video-openchrome \
#xserver-xorg-video-qxl xserver-xorg-video-r128  xserver-xorg-video-radeon xserver-xorg-video-s3 \
#xserver-xorg-video-savage xserver-xorg-video-siliconmotion xserver-xorg-video-sis xserver-xorg-video-sisusb \
#xserver-xorg-video-tdfx xserver-xorg-video-trident xserver-xorg-video-vmware fuse \
#geoip-database sound-theme-freedesktop fuse-utils aptitude pciutils hdparm lshw ftp parted telnet \
#mlocate ppp pppconfig pppoeconf bind9-host dosfstools strace mtr-tiny

# Tell bash-completion about missing man package because apt-get is not doing its job...
rm -r /etc/bash_completion.d/man/* || true

# Killing rsyslog so we can remove logs.
service rsyslog stop || true

# TO DO
# Which are safe?
# rm /usr/share/icons/nuoveXT2/icon-theme.cache
# cd /usr/share/locale &&  ls | grep -v en | xargs rm -r && cd /home/"$user_name"
# rm -r /usr/share/doc/* #(are we even allowed to do that, see licenses?)

config_vidalia() {
trap "error_handler" ERR INT TERM

# Not in use yet.
# Waiting for Vialia 0.3.

echo "
######################################################
config_vidalia
######################################################
"

# Vidalia config file gets copied by copyinto.

# Lift permissions to edit torrc to allow Vidalia editing torrc.
# There should be no security implications, since Whonix-Gateway is
# not a multi user environment, it's solely used to host Tor. On the
# other hand, for the Tor Browser Bundle, Tor, Vidalia and Tor Browser
# run under the very same user account.
chmod --recursive g+rw /etc/tor/torrc
chmod --recursive o+rw /etc/tor/torrc
}

usermod -a -G audio "$user_name"
sudo -u "$user_name" amixer
sudo -u "$user_name" amixer set Master 70 unmute
sudo -u "$user_name" amixer set PCM 70 unmute

start_vm() {
   trap "error_handler" ERR INT TERM

   : echo "whonix_createvm: $VMNAME starting..."

   sudo -u "$user_name" VBoxSDL --startvm "$VMNAME"

   : echo "whonix_createvm: VirtualBox terminated without error messages."
   : echo "whonix_createvm: This is no guarantee everything went well inside the VM."
}



################################################################
# no option chosen                                             #
################################################################
if [[ $# == 0 ]]; then
   : echo "No option chosen. Use -help for help."
   touch /home/"$user_name"/whonix_binary/WHONIX_BUILD_FAILED || true
   exit 1
fi

################################################################
# -help                                                        #
################################################################
if [[ "$1" = "-help" ]]; then
   script_help
   exit 0
fi

################################################################
# -tg-createimg                                                #
################################################################
if [[ "$1" = "-tg-createimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   VMSIZE="2G"
   create_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tg-copyimg                                                  #
################################################################
if [[ "$1" = "-tg-copyimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   copy_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tg-converttovdi                                             #
################################################################
if [[ "$1" = "-tg-converttovdi" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   convert_to_vdi
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tg-createvboxvm                                             #
################################################################
if [[ "$1" = "-tg-createvboxvm" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   VMRAM="128"
   general_setup
   gateway_specific
   hardware_modifications
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tg-copyinto                                                 #
################################################################
if [[ "$1" = "-tg-copyinto" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   copy_into_vm_image_whonix_gateway
   unmount_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tg-chroot                                                   #
################################################################
if [[ "$1" = "-tg-chroot" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   do_chroot
   inside_chroot
   do_unchroot
   unmount_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tg-interactive                                              #
################################################################
if [[ "$1" = "-tg-interactive" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   do_chroot
   interactive_chroot
   do_unchroot
   unmount_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tg-source                                                   #
################################################################
if [[ "$1" = "-tg-source" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   do_chroot
   download_sources
   do_unchroot
   move_sources
   unmount_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tg-export                                                   #
################################################################
if [[ "$1" = "-tg-export" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   ## TO DO: Snapshot not included in exported ova.
   #: echo "whonix_createvm: Creating snapshot..."
   #sudo -u "$user_name" VBoxManage snapshot "$VMNAME" take "default" --description "$SNAPSHOT_DESCRIPTION"
   sudo -u "$user_name" VBoxManage export "$VMNAME" --output "$HOMEVAR/whonix_binary/$VMNAME".ova
   : echo "BUILD INFO: Done."
   exit 0
fi

################################################################
# -tg-vboxdelete                                               #
################################################################
if [[ "$1" = "-tg-vboxdelete" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   delete_vm
   exit 0
fi

################################################################
# -tg-bare-metal                                               #
################################################################
if [[ "$1" = "-tg-bare-metal" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=""
   copy_into_vm_image_whonix_gateway
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tw-createimg                                                #
################################################################
if [[ "$1" = "-tw-createimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   VMSIZE="50G"
   create_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tw-copyimg                                                  #
################################################################
if [[ "$1" = "-tw-copyimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   copy_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tw-converttovdi                                             #
################################################################
if [[ "$1" = "-tw-converttovdi" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   convert_to_vdi
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tw-createvboxvm                                             #
################################################################
if [[ "$1" = "-tw-createvboxvm" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   VMRAM="768"
   general_setup
   workstation_specific
   hardware_modifications
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tw-copyinto                                                 #
################################################################
if [[ "$1" = "-tw-copyinto" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   copy_into_vm_image_whonix_workstation
   unmount_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tw-chroot                                                   #
################################################################
if [[ "$1" = "-tw-chroot" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   do_chroot
   inside_chroot
   do_unchroot
   unmount_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tw-interactive                                              #
################################################################
if [[ "$1" = "-tw-interactive" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   do_chroot
   interactive_chroot
   do_unchroot
   unmount_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tw-source                                                   #
################################################################
if [[ "$1" = "-tw-source" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   do_chroot
   download_sources
   do_unchroot
   move_sources
   unmount_raw
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tw-export                                                   #
################################################################
if [[ "$1" = "-tw-export" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   ## TO DO: Snapshot not included in exported ova.
   #: echo "whonix_createvm: Creating snapshot..."
   #sudo -u "$user_name" VBoxManage snapshot "$VMNAME" take "default" --description "$SNAPSHOT_DESCRIPTION"
   sudo -u "$user_name" VBoxManage export "$VMNAME" --output "$HOMEVAR/whonix_binary/$VMNAME".ova
   : echo "BUILD INFO: Done."
   exit 0
fi

################################################################
# -tw-vboxdelete                                               #
################################################################
if [[ "$1" = "-tw-vboxdelete" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   delete_vm
   exit 0
fi

################################################################
# -tw-bare-metal                                               #
################################################################
if [[ "$1" = "-tw-bare-metal" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=""
   copy_into_vm_image_whonix_workstation
   : echo "BUILD INFO: Done, if success, next step should be: see sudo ./whonix_createvm -help"
   exit 0
fi

################################################################
# -tg-mountimg                                                 #
################################################################
if [[ "$1" = "-tg-mountimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tg-unmountimg"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################
# -tg-unmountimg                                               #
################################################################
if [[ "$1" = "-tg-unmountimg" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   unmount_raw
   : echo "INFO: unmount done."
   exit 0
fi

################################################################
# -tw-mountimg                                                 #
################################################################
if [[ "$1" = "-tw-mountimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_raw
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tw-unmountimg"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################
# -tw-unmountimg                                               #
################################################################
if [[ "$1" = "-tw-unmountimg" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   unmount_raw
   echo "INFO: unmount done."
   exit 0
fi

################################################################
# -tg-mountvdi                                                 #
################################################################
if [[ "$1" = "-tg-mountvdi" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_vdi
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tg-unmountvdi"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################
# -tg-unmountvdi                                               #
################################################################
if [[ "$1" = "-tg-unmountvdi" ]]; then
   root_check
   VMNAME="Whonix-Gateway"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   unmount_vdi
   : echo "INFO: unmount done."
   exit 0
fi

################################################################
# -tw-mountvdi                                                 #
################################################################
if [[ "$1" = "-tw-mountvdi" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   mount_vdi
   : echo "INFO: mount done."
   : echo "- Mounted to: cd \"$CHROOT_FOLDER\""
   : echo "- Leave the folder after you are done!!! cd ~"
   : echo "- Do not forget to run: sudo ./whonix_createvm -tw-unmountvdi"
   : echo "- Otherwise strange bugs may occur."
   exit 0
fi

################################################################
# -tw-unmountvdi                                               #
################################################################
if [[ "$1" = "-tw-unmountvdi" ]]; then
   root_check
   VMNAME="Whonix-Workstation"
   CHROOT_FOLDER=/home/"$user_name"/whonix_binary/"$VMNAME"_image
   unmount_vdi
   echo "INFO: unmount done."
   exit 0
fi

#################
## am_I_sourced #
#################

## Thanks to:
## Wirawan Purwanto
## http://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced

am_I_sourced() {
  if [ "${FUNCNAME[1]}" = source ]; then
    if [ "$1" = -v ]; then
      true
    fi
    return 0
  else
    if [ "$1" = -v ]; then
      true
    fi
    return 1
  fi
}

if am_I_sourced -v; then
  true
else
  run-chroot-script-raw
fi

   ## No longer neccessary.
   ## Let's keep it in case we need it again.
   #locale-gen en_US.UTF-8
   #dpkg-reconfigure locales
   #echo 'LANG="en_US.UTF-8"' > /etc/default/locale

   ###############
   ## Discussion #
   ###############

   ## Discussion: we may also think about mounting everything,
   ##             i.e. recursively mounting.
   ##             i.e. mount --rbind

   ## Discussion: This would leak uuid of the host disk!
   ##  We would need to phrase it and somehow to remove the uuids. How?
   ##  And only use relevant stuff...
   ##  grep -v rootfs /proc/mounts > /etc/mtab

   ## No longer needed?
   ## Missing info on mounted /dev/loop, needs testing.
   ## (proper) Please elborate.
   #echo "/dev/sda1 / ext4 rw,noatime,errors=remount-ro 0 0
   #proc /proc proc rw,noexec,nosuid,nodev 0 0
   #sysfs /sys sysfs rw,noexec,nosuid,nodev 0 0
   #none /sys/fs/fuse/connections fusectl rw 0 0
   #none /sys/kernel/debug debugfs rw 0 0
   #none /sys/kernel/security securityfs rw 0 0
   #udev /dev devtmpfs rw,mode=0755 0 0
   #devpts /dev/pts devpts rw,noexec,nosuid,gid=5,mode=0620 0 0
   #tmpfs /run tmpfs rw,noexec,nosuid,size=10%,mode=0755 0 0
   #none /run/lock tmpfs rw,noexec,nosuid,nodev,size=5242880 0 0
   #none /run/shm tmpfs rw,nosuid,nodev 0 0" > /etc/mtab

   ## REVIEW: not sure if we better mount more or less of them.

   #############
   ## /dev/pts #
   #############

   ## Fixes "Can not write log, openpty() failed (/dev/pts not mounted?)"
   ## Thanks to
   ## http://www.gentoo.org/proj/en/base/amd64/howtos/index.xml?part=1&chap=2
   ## for the idea.
   ## Would not be needed if we used mount --rbind.
   ## REVIEW: not sure if we better ommit it.
   #mount -o bind /dev/pts "$CHROOT_FOLDER"/dev/pts

## Deactivate swap partition. Will not be created when using preseed.
## Deactivating anyway just in case anyone manually installs the operating system.
## No longer required since using debootstrap.
#swapoff /dev/sda5 || true

## Share the same uuid among all Whonix users.
## Setting anyway just in case anyone manually installs the operating system
## and then applies the script.
## No longer required since using debootstrap.
#mkswap /dev/sda5 -U 9159bf6e-e242-4510-b4c1-348db252feff || true

## /etc/fstab gets copied into VM by whonix_image copyinto.

#!/bin/bash

set -x

error_handler() {
   echo "
###################################
## chroot script: ERROR detected. #
###################################
"

   exit 1
}

trap "error_handler" ERR INT TERM

sudo -u user crontab -l || true
sudo -u user crontab /usr/share/whonix/user_crontab
sudo -u user crontab -l


   ## Non-intrusive notification, that the checks are running in background.
   ## TO DO: After the timeout bug has been fixed upstream, --expire-time has to be set to 30.
   #notify-send --urgency low --expire-time 0 --app-name "Whonix" "$NOTIFY_MSG"

   ## this is not the most stable daemon...
   ## Not used as we switched from notify-send to zenity
   #if [ "$(pgrep -f notification-daemon)" = "" ]; then
   #   /usr/lib/notification-daemon/notification-daemon &
   #fi

   ## check if notify-send is installed
   ## that is not the case for cli users
   ## this is also not the case on Whonix-Gateway
   #if [ `which notify-send` = "" ]; then
   #   notify-send() {
   #      ## dummy
   #      true
   #   }
   #fi

#########################################################################
## tb_create_user_js                                                    #
#########################################################################

tb_create_user_js() {
trap "tb_error_handler" ERR

## Editing /home/"$user_name"/tor-browser_"$TB_LANG"/Data/profile/users.js
## http://kb.mozillazine.org/User.js_file
## Configuring Tor Button to use SOCKSPort

echo '
## Begin of patched user.js.
## If you edit this file while Firefox is running, your changes will be
## overwritten, when you close Firefox.

## How to create the user.js network settings:
## 1. Make a backup of prefs.js.
## 1. Start Tor Browser with the patched start script.
## 2. Apply proxy settings using the Tor Button settings dialog..
## 3. Make a diff from the old and the new pref.js.
## 4. Copy the relevant changes to user.js.

## network settings
## (Are now set in /etc/environment - or not...)
## (See /etc/environment.)
user_pref("extensions.torbutton.use_privoxy", false);
user_pref("extensions.torbutton.settings_method", "custom");
user_pref("extensions.torbutton.socks_host", "10.152.152.10");
user_pref("extensions.torbutton.socks_port", 9100);
user_pref("network.proxy.socks", "10.152.152.10");
user_pref("network.proxy.socks_port", 9100);
user_pref("extensions.torbutton.custom.socks_host", "10.152.152.10");
user_pref("extensions.torbutton.custom.socks_port", 9100);

## End of Whonix user.js.
' >> tor-browser_"$TB_LANG"/Data/profile/user.js

}

## Check if xhost is installed, only the case on graphical Whonix-Workstation,
## to avoid an error message, if it is not installed.
if [ ! `which xhost` = "" ]; then
   ## Add xhost exception, as required for zenity, since cron starts as root and
   ## whonixcheck (zenity) starts as user.
   ## Thanks to:
   ##    http://promberger.info/linux/2009/01/02/running-x-apps-like-zenity-from-crontab-solving-cannot-open-display-problem/
   ## For Debugging.
   #sudo -u user xhost +local:user || true
   ## Non-debugging. Hide non-important message from user.
   sudo -u user xhost +local:user > /dev/null || true
fi

## 1) Prepare directory for the disabled plugins.
mkdir --parents /usr/lib/xchat/plugins.disabled/

## Disable unnecessary plugins (keep perl for sasl).
#mv /usr/lib/xchat/plugins/{python.*,tcl.*} /usr/lib/xchat/plugins.disabled/ || true

## 2) Move all plugins to plugins.disabled.
mv /usr/lib/xchat/plugins/* /usr/lib/xchat/plugins.disabled/ || true

true "INFO: Listing missing files..."
true "      (Only an information, no check...)"
true "      (Has to be reviewed manually by the builder.)"
true "      Note:"
true "      - /usr/share/applications/kde4/knetattach.desktop (from kde-runtime package)"
true "      - /usr/lib/xchat/plugins/python.so (from xchat package)"
true "      - /usr/lib/xchat/plugins/tcl.so (from xchat package)"
true "      are expected to be missing (after running the later chroot-scripts at least once)."

debsums --silent || true

true "INFO: Listed missing files."

echo "Adding htpdate init script..."
update-rc.d htpdate defaults

## NTP does not work over Tor because it uses UDP.
## If it were to work, it would not be secure, because
## it is by default not encrypted. Whonix has its own
## safe network time synchronization mechanism. See
## Whonix design.
echo "ntpdate hold" | dpkg --set-selections

## Not installing Debian popularity contest due to privacy concerns.
echo "popularity-contest hold" | dpkg --set-selections

## Not installing resolvconf as it can modify DNS settings,
## resulting in not using Tor as DNS resolver. Advanced users
## should knowingly install resolvconf or edit /etc/resolv.conf
## manually.
echo "resolvconf hold" | dpkg --set-selections

## Not installing the Ubuntu version of popularity-contest.
## Only interesting for custom builds.
echo "canonical-census hold" | dpkg --set-selections

## Not installing Ubuntu packages with privacy concerns.
## Only interesting for custom builds.
echo "unity-lens-shopping hold" | dpkg --set-selections
echo "unity-scope-video-remote hold" | dpkg --set-selections
echo "unity-scope-musicstores hold" | dpkg --set-selections
echo "geoclue-ubuntu-geoip hold" | dpkg --set-selections
echo "geoclue hold" | dpkg --set-selections

## Not installing uncomplicated firewall, because it
## conflicts with Whonix's own firewall started by
## /etc/network/interfaces pre-up.
## Only interesting for custom builds.
echo "ufw hold" | dpkg --set-selections

hardware_modifications() {
   trap "errorhandlergeneral" ERR INT TERM

   ## Thanks to:
   ## - http://www.dedmeet.com/software-projects-mainmenu-12/asus-recovery-cd-with-virtualbox.html
   ## - https://www.virtualbox.org/ticket/7325
   ## Hiding BIOS information.
   ##
   ##
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVendor'        'American Megatrends Inc.'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVersion'       'string:N61Jq.204'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseDate'   'string:01/05/2010'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMajor'  '4'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMinor'  '6'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMajor' '152'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMinor' '152'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor'      'ASUSTeK Computer Inc.'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct'     'N61Jq'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemVersion'     '1.0'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial'      '###############'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid'        '###############'
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" 'VBoxInternal/Devices/pcbios/0/Config/DmiSystemFamily'      'To Be Filled By O.E.M.'
   ##
   ##
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVendor"        "BIOS Vendor"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSVersion"       "BIOS Version"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseDate"   "BIOS Release Date"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMajor"  1
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSReleaseMinor"  2
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMajor" 3
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBIOSFirmwareMinor" 4
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor"      "System Vendor"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct"     "System Product"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemVersion"     "System Version"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial"      "System Serial"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemSKU"         "System SKU"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemFamily"      "System Family"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemUuid"        "9852bf98-b83c-49db-a8de-182c42c7226b"

   ## TO DO VBOX: Wait for next VirtualBox version.
   ## Not yet available.
   ## http://wiki.ubuntuusers.de/Dualboot-Windows_virtualisieren
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisAssetTag" "<EMPTY>"
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisSerial" "<EMPTY>"
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisVendor" "string:Medion"
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiChassisVersion" "string:N/A"
   ## https://forums.virtualbox.org/viewtopic.php?f=2&t=43678
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBoardProduct""D2560-A2"
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiBoardVendor" "FUJITSU SIEMENS"
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemProduct" "ESPRIMO P"
   #sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/pcbios/0/Config/DmiSystemVendor" "FUJITSU SIEMENS"

   ## Configuring the hard disk vendor product data (VPD)
   ## http://www.virtualbox.org/manual/ch09.html#changevpd

   ## Port0 (hdd)
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/SerialNumber" "serial"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/FirmwareRevision" "firmware"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ModelNumber" "model"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ATAPIVendorId" "vendor"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ATAPIProductId" "product"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port0/ATAPIRevision" "revi"

   ## Port1 (cd-rom)
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/SerialNumber" "serial"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/FirmwareRevision" "firmware"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ModelNumber" "model"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ATAPIVendorId" "vendor"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ATAPIProductId" "product"
   sudo -u "$user_name" VBoxManage setextradata "$VMNAME" "VBoxInternal/Devices/ahci/0/Config/Port1/ATAPIRevision" "revi"

   ## Show changes.
   sudo -u "$user_name" VBoxManage getextradata "$VMNAME" enumerate
}

   ## VM UUID
   ## Thanks to:
   ## http://www.windowstablettv.com/windows-tips/190-virtualbox-clone-windows-activation/
   sudo -u "$user_name" VBoxManage modifyvm "$VMNAME" --hardwareuuid "dbc5316a-2600-4d6e-8964-a07f3de5ded8"

   ## HD UUID
   ## Thanks to:
   ## http://michail.flouris.net/2011/11/virtualbox-vm-disk-clone-uuid-problem/
   sudo -u "$user_name" VBoxManage internalcommands sethduuid "$HOMEVAR/VirtualBox VMs/$VMNAME/$VMNAME.vdi" "0156199f-6e83-4cd6-97b7-c9e24d9cd26d"

   ## VM UUID
   ## Thanks to:
   ## https://forums.virtualbox.org/viewtopic.php?f=2&t=22653&start=75
   sudo -u "$user_name" VBoxManage modifyvm "$VMNAME" --hardwareuuid "05f2222c-9697-485b-b105-267a36c401fc"

   ## HD UUID
   ## Thanks to:
   ## http://mixeduperic.com/ubuntu/how-to-copy-a-virtualbox-virtual-machine-in-ubuntu.html
   sudo -u "$user_name" VBoxManage internalcommands sethduuid "$HOMEVAR/VirtualBox VMs/$VMNAME/$VMNAME.vdi" "77d55d86-800c-4667-9e60-678f81a50913"

export SNAPSHOT_DESCRIPTION="
   Reverts your Virtual Machine back to a clean state.
   All changes, all installed packages, all data you created will be lost!
"

   for FINGERPRINT in $(\
      sudo -u "$user_name" gpg \
         --homedir "$WHONIX_LOCAL_SIGNING_KEY_FOLDER" \
         --no-default-keyring \
         --with-colons \
         --keyid-format "0xlong" \
         --fingerprint \
         2>/dev/null \
         | awk -F: '$1 == "fpr" {print $10;}'\
         ); do
 echo "XXX: $FINGERPRINT"
            #export DEBSIGN_KEYID="$FINGERPRINT"
            #true "${cyan}$BASH_SOURCE INFO: Fingerprint of local OpenPGP signing key is $FINGERPRINT. ${reset}"
   done

cd "$WHONIX_SOURCE_PARENTDIR"

tar \
   --preserve-permissions \
   --create \
   --gzip \
   --exclude .git \
   --file whonix_"$WHONIX_BUILD_WHONIX_VERSION".orig.tar.gz \
   Whonix

## {{{ WHONIX_BUILD_NEW_DEB_REVISION_VERSION

WHONIX_BUILD_NEW_DEB_REVISION_VERSION=$(expr ${whonix_build_old_deb_revision_version} + 1) || true

echo "WHONIX_BUILD_NEW_DEB_REVISION_VERSION: $WHONIX_BUILD_NEW_DEB_REVISION_VERSION"

## }}}

get_local_whonix_version() {
   trap "error_handler" ERR

   ## Find out installed Whonix version.
   ## Read only FIRST line.
   whonix_deb_package_version="Could not read local Whonix version file. Please report this bug!"
   read -r whonix_deb_package_version < /usr/share/whonix/version || true
   ## Remove ALL spaces.
   ## Thanks to
   ## http://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable
   whonix_deb_package_version="${whonix_deb_package_version//[[:space:]]}"
}

   ## REVIEW
   ## NAT adapter also gets fixed MAC shared among all Whonix users.
   ## Use cases:
   ## - Whonix-Workstation can see it.
   ## - See Whonix Security page about Whonix in public networks / MAC address
   ## - In case the Gateway gets broken, this one can not be used as identifier.
   ##   Gets interesting in future with multiple gateways.
   sudo -u "$user_name" VBoxManage modifyvm "$VMNAME" --macaddress1 002682475ce1

   ## Enter following MAC address: 0013029cf191
   sudo -u "$user_name" VBoxManage modifyvm "$VMNAME" --macaddress2 0013029cf191

   ## Enter following MAC address: 0021004d8f08
   sudo -u "$user_name" VBoxManage modifyvm "$VMNAME" --macaddress1 0021004d8f08


   ## Check if config-package-dev with debhelper support is installed.
   ## (Build Dependency for Whonix Build Script for creating .deb packages.)
   if [ ! -d /usr/share/doc/config-package-dev/examples/debhelper/ ]; then
      ## Temporarily adding debian testing (jessi) repository, because we need config-package-dev with debhelper support,
      ## which is unfortunately only available since debian jessi.
      local TEMP=/etc/apt/sources.list.d/whonixtestingtemp.list
      echo "deb http://ftp.us.debian.org/debian testing main" > "$TEMP"

      ## Update package lists and install config-package-dev from debian testing (jessi).
      apt-get update \
                   -o Dir::Etc::sourcelist="$TEMP" \
                   -o Dir::Etc::sourceparts="-" \
                   -o APT::Get::List-Cleanup="0"

      apt-get -t testing install config-package-dev

      ## Removing temporary debian testing (jessi) repository.
      rm --force "$TEMP"

      ## Update package lists again to get rid of debian testing (jessi) repository.
      apt-get update \
         --no-download \
         --list-cleanup
   fi

Package: dummytor
Provides: tor
Replaces: tor
Breaks: tor
Architecture: all
Depends: ${misc:Depends}
Description: Dummy Tor Package
 Is a virtual package, supposed to be installed on Whonix-Workstation, which
 prevents installing the real Tor package from upstream (ex: Debian,
 The Tor Project) APT repositories. Its purpose is to prevent, running Tor over
 Tor.
 .
 It allows installation of packages, which depend on Tor,
 such as TorChat, parcimonie and torbrowser-launcher.

   ## Check, if we are not in CLI.
   if [ "$DISPLAY" ]; then
      ## Check if apper is installed and use it.
      if [ -f "$(command -v apper)" ]; then

         ## The Apper line below worked, but Apper has
         ## too many bugs. Needs more testing and bugreports.
         #apper --updates --display "$DISPLAY" 2>/dev/null

         local MSG="Debian Package Update Check Result: Apt-get reports that $first_char packages can be updated. Please update Whonix-Gateway and Whonix-Workstation:
(Open a terminal, Start menu -> Applications -> System -> Terminal.)
    sudo apt-get update && sudo apt-get dist-upgrade"
         $output ${output_opts[@]} --messagex --typex "warning" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "warning" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi
   fi

   dd if="$raw_file" of="$manual_analysis_folder/$raw_file_basename.dd.512" bs=512 count=1

   /sbin/sfdisk -d "$raw_file" > "$auto_hash_folder/$raw_file_basename.sfdisk-d"

   /sbin/fdisk -l "$raw_file" > "$auto_hash_folder/$raw_file_basename.fdisk-l"

   /sbin/fdisk -s "$raw_file" > "$auto_hash_folder/$raw_file_basename.fdisk-s"

   /sbin/parted --list "$raw_file" > "$auto_hash_folder/$raw_file_basename.parted--list"

   /sbin/parted --list --machine "$raw_file" > "$auto_hash_folder/$raw_file_basename.parted--list--machine"

   /sbin/parted "$raw_file" print > "$auto_hash_folder/$raw_file_basename.parted_print"

   /sbin/parted --machine "$raw_file" print > "$auto_hash_folder/$raw_file_basename.parted_--machine_print"

   /sbin/parted --machine "$raw_file" unit B print > "$auto_hash_folder/$raw_file_basename.parted_--unit_B_print"

   ## BYT;
   ## /home/user/whonix_binary/$tempfolder/raw_folder/Whonix-Gateway-7.raw:107374182400B:file:512:512:msdos:;
   ## 1:2097152B:107374182399B:107372085248B:ext4::;

   sudo -E -u "$user_name" \
      faketime -f "2013-08-15 11:02:35" \
         debchange \
            $debchange_vendor_cmd "whonix" \
            --create \
            --package "whonix" \
            --distribution "$WHONIX_BUILD_APT_CODENAME" \
            --newversion "$whonix_build_new_changelog_version" \
            "This is an auto-generated file.
Local auto bump version. Build from:
whonix_build_current_git_head: $whonix_build_current_git_head
whonix_build_new_changelog_version: $whonix_build_new_changelog_version
anon_dist_build_version: $anon_dist_build_version"

   if [ "$tbb_version_first_char" = "2" ]; then
      debug "INFO: TBB 2.x detected. Patching startup script..."

      debug "INFO: Moving the original Tor Browser Bundle startup script to tor-browser_$TB_LANG/Docs/..."
      mv "$home_folder/.tb/tor-browser_$TB_LANG/start-tor-browser" "$home_folder/.tb/tor-browser_$TB_LANG/Docs/"

      debug "INFO: Creating Unbundled Tor Browser startup script..."
      ## Using this until Tor Browser upstream patch #7266 gets accepted.
      ##    improve RelativeLink.sh script comments, patch attached
      ##    https://trac.torproject.org/projects/tor/ticket/7266
      ##
      ## After #7266 got accepted, a new patch with TB_STANDALONE will
      ## be proposed.
      ##
      ## Has been copied into Whonix-Workstation at build time.
      cp "/usr/share/whonix/start-tor-browser" "$home_folder/.tb/tor-browser_$TB_LANG/start-tor-browser"
      chmod +x "$home_folder/.tb/tor-browser_$TB_LANG/start-tor-browser"
   else
      debug "INFO: TBB 2.x not detected. Patching startup script no longer required."
   fi

   ## Check if libguestfs-tools is installed.
   ## (Build Dependency for Whonix Build Script for creating .deb packages.)
   local dpkg_exit_code
   dpkg_exit_code="0"
   dpkg-query -Wf '${db:Status-abbrev}' "libguestfs-tools" 2>/dev/null | grep -q '^i' || { dpkg_exit_code="$?" ; true; };
   if [ ! "$dpkg_exit_code" = "0" ]; then
      if [ "$BARE_METAL" = "1" ]; then
         true "INFO: BARE_METAL is $BARE_METAL, installation of libguestfs-tools not required, ok."
      else
         local install_from_testing_required="1"
         local libguestfs_tools_install_required="1"
      fi
   else
      true "INFO: libguestfs-tools already installed, ok."
   fi

   local temp
   temp="$(( ${SDWDATE_TIME_DIFF[SDWDATE_POOL_PAL]} + ${SDWDATE_TIME_DIFF[SDWDATE_POOL_NEUTRAL]} ))"
   temp="$(( $temp + ${SDWDATE_TIME_DIFF[SDWDATE_POOL_FOE]} ))"
   SDWDATE_MEDIAN_TIME_SECONDS="$(( $temp / 3 ))"


install_initial_packages() {
   trap "error_handler" ERR

   shopt -s nullglob dotglob

   for file_name in "/var/lib/whonix/initial-packages/"*; do
      ## Example file_name:
      ## /var/lib/whonix/initial-packages/nano_2.2.6-1+b1_i386.deb
      file_basename="$(basename "$file_name")"
      ## Example file_name:
      ## nano_2.2.6-1+b1_i386.deb
      package="$(echo "$file_basename" | tr "_" " " | awk '{print $1}')"
      ## Example package:
      ## nano
      dpkg_status="$(dpkg-query --show --showformat='${db:Status-Abbrev}' "$package")"
      ## Example dpkg_status:
      ## ii
      status_second_char="${dpkg_status:1:1}"
      ## Example status_second_char:
      ## i
      if [ "$status_second_char" = "i" ]; then
         ## Installed. Reinstall...
         true "INFO: Reinstalling $package ($file_name)..."
         dpkg --install "$file_name"
      else
         ## Not installed. Skipping.
         true "INFO: $package ($file_name) not installed, skipping."
      fi
   done

   shopt -u nullglob dotglob
}

## Deactivated for now. Let's see if we can substitute that we dpkg.
#install_initial_packages

## {{{ dpkg-reconfigure

#cp --preserve --verbose /usr/share/whonix/policy-rc.d /usr/sbin/policy-rc.d

#dpkg-reconfigure --force --all

#rm --verbose --force /usr/sbin/policy-rc.d

## }}}

bump_debian_changelog_version() {
   trap "errorhandlergeneral" ERR INT TERM

   true "${cyan}$BASH_SOURCE INFO: Automatically bumping version number in debian/changelog... ${reset}"

   cd "$MYDIR"
   cd ..

   ## debchange in Ubuntu somehow does not support --vendor, only --distributor.
   ## Small workaround for travis-ci (using Ubuntu).
   if [ "$whonix_build_on_operating_system" = "ubuntu" ]; then
      ## Using --distributor when Ubuntu is detected.
      debchange_vendor_cmd="--distributor"
   else
      ## Otherwise fall back to --vendor.
      debchange_vendor_cmd="--vendor"
   fi

   ## Debugging.
   faketime --version
   ls -la ./debian/changelog || true

   ## bump changelog version numbers
   ## whonix is written in lower case,
   ## because that is the name of the file in /etc/dpkg/origins/
   local package
   package="whonix"
   echo "\
$package ($whonix_build_new_changelog_version) $WHONIX_BUILD_APT_CODENAME; urgency=low

  * This is an auto-generated file. Local auto bump version. Build from:
  * whonix_build_current_git_head: $whonix_build_current_git_head
  * whonix_build_new_changelog_version: $whonix_build_new_changelog_version
  * anon_dist_build_version: $anon_dist_build_version

 -- $DEBFULLNAME <$DEBEMAIL>  Thu, 15 Aug 2013 11:02:35 +0000
" > ./debian/changelog

   ## Explicitly set access time, so we end up with a deterministic debian.tar.gz file
   shopt -s globstar
   touch -t "201308151102.35" ./debian
   touch -t "201308151102.35" ./debian/**
   shopt -u globstar

   ## Debugging.
   ls -la ./debian/changelog || true
   cat ./debian/changelog

   true "${cyan}$BASH_SOURCE INFO: Bumped version number in debian/changelog. ${reset}"
}

create_whonix_upstream_tarball() {
   trap "errorhandlergeneral" ERR INT TERM

   ## Creating upstream tarball, because we are creating a non-native Debian package.
   true "${cyan}$BASH_SOURCE INFO: Creating upstream tarball... ${reset}"

   sudo -E -u "$user_name" \
       "$WHONIX_SOURCE_HELP_STEPS_FOLDER/make-debian-package-upstream-tarball"

   true "${cyan}$BASH_SOURCE INFO: Created upstream tarball. ${reset}"
}

## {{{ whonix_build_old_changelog_version

## fallback
export whonix_build_old_changelog_version="ERROR. Please report this bug! whonix_build_old_changelog_version could not be determined."

cd "$WHONIX_SOURCE_FOLDER"

if [ "$no_dpkg_parsechangelog" = "1" ]; then
   whonix_build_old_changelog_version="dpkg-parsechangelog deactivated"
elif [ -f "$WHONIX_SOURCE_FOLDER/debian/changelog" ]; then
   command -v dpkg-parsechangelog >/dev/null
   OIFS="${IFS}"
   NIFS=$'\n'
   IFS="${NIFS}"
   unset line
   for line in $(dpkg-parsechangelog); do
      first="$(echo "$line" | awk '{print $1}')"
      second="$(echo "$line" | awk '{print $2}')"
      first="$(echo "$first" | awk '{print tolower($BASH_SOURCE)}')"
      if [ "$first" = "version:" ]; then
         export whonix_build_old_changelog_version="$second"
         break
      fi
   done
   unset line

   IFS="${OIFS}"
else
   whonix_build_old_changelog_version="none"
fi

#echo "whonix_build_old_changelog_version: $whonix_build_old_changelog_version"

## }}}

## {{{ whonix_build_whonix_version_old

## Deactivated. No longer required.

#whonix_build_whonix_version_old="$whonix_build_old_changelog_version"
#whonix_build_whonix_version_old="$(echo "$whonix_build_whonix_version_old" | tr "-" " ")"
#whonix_build_whonix_version_old="$(echo "$whonix_build_whonix_version_old" | awk '{print $1}')"

#echo "whonix_build_whonix_version_old: $whonix_build_whonix_version_old"

## }}}

## {{{ whonix_build_old_deb_revision_version

## Deactivated. No longer required.

#whonix_build_old_deb_revision_version="$whonix_build_old_changelog_version"
#whonix_build_old_deb_revision_version="$(echo "$whonix_build_old_deb_revision_version" | tr "-" " ")"
#whonix_build_old_deb_revision_version="$(echo "$whonix_build_old_deb_revision_version" | awk '{print $2}')"
#whonix_build_old_deb_revision_version="$(echo "$whonix_build_old_deb_revision_version" | sed 's/debpackage//g')"

#echo "whonix_build_old_deb_revision_version: ${whonix_build_old_deb_revision_version}"

## }}}

## {{{ whonix_build_new_deb_revision_version

#whonix_build_new_deb_revision_version="$(( ${whonix_build_old_deb_revision_version} + 1 ))"

#whonix_build_new_deb_revision_version="${whonix_build_old_deb_revision_version}"

#echo "whonix_build_new_deb_revision_version: $whonix_build_new_deb_revision_version"

## }}}

## {{{ whonix_build_new_changelog_version

whonix_build_new_deb_revision_version="1"

## You can learn more about epoch here:
## http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version
whonix_build_debian_version_epoch="2"

whonix_build_new_changelog_version="${whonix_build_debian_version_epoch}:${anon_dist_build_version}-debpackage${whonix_build_new_deb_revision_version}"

echo "whonix_build_new_changelog_version: $whonix_build_new_changelog_version"

## }}}

   ## Create backup of grml-debootstrap's original chroot-script.
   cp --no-clobber "/etc/debootstrap/chroot-script" "/etc/debootstrap/chroot-script.backup"

   ## Use chroot-script with fixed DPKG_OPTIONS variable.
   ## This hack can be dropped as soon as
   ## https://github.com/grml/grml-debootstrap/pull/11 is lands in Debian.
   cp "$WHONIX_SOURCE_FOLDER/grml_chroot-script" "/etc/debootstrap/chroot-script"

## {{ get upstream version number from debian/changelog

command -v dpkg-parsechangelog >/dev/null
OIFS="${IFS}"
NIFS=$'\n'
IFS="${NIFS}"
for line in $(dpkg-parsechangelog); do
   ## Example line:
   ## Version: 0.1-1
   IFS="${OIFS}"
   read -r first second _ <<< "$line"
   ## Example first:
   ## Version:
   ## Example second:
   ## 0.1-1
   first="${first,,}"
   ## Example first:
   ## version
   if [ "$first" = "version:" ]; then
      version="$second"
      ## Example version:
      ## 0.1-1
      version="${version%-*}"
      ## Example version:
      ## 0.1
      break
   fi
done
IFS="${OIFS}"

## }}

   #if [ "$display" = "" ]; then
   #   display=":0"
   #fi
   #fi


   ## "sudo -u user" is required, because /etc/init.d/sdwdate runs
   ## as root. When making changes, test this using:
   ## sudo touch /var/lib/whonix/sdw_error
   ## sudo service sdwdate restart
   #sudo -u user zenity \
   #   --display="$display" \
   #   --height=600 \
   #   --width=800 \
   #   --timeout 86400 \
   #   --no-markup \
   #   --window-icon "$icon" \
   #   --title="$title" \
   #   "--$type" \
   #     --text "$msg" \
   #   >/dev/null 2>/dev/null &

   #echo "$msg"

   #if [ "$lefttop" = "1" ]; then
      ## provided by /usr/lib/msgcollector/msgwmctrl
   #   output_wmctrl_move_window_to_left_top "$title"
      ## Not in Debian Wheezy, due to a bug in zenity resulting in no visible
      ## text. Can be re-enabled in Debian Jessie.
      #output_wmctrl_maximize_window "$title"
   #fi

   #mkdir --parents "$WHONIX_BINARY/temp_libvirt"
   #chown "$user_name":"$user_name" "$WHONIX_BINARY/temp_libvirt"

   #local source_xml temp_xml temp new

   #if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      #source_xml="$WHONIX_SOURCE_FOLDER/libvirt/whonix_gateway.xml"
      #temp_xml="$WHONIX_BINARY/temp_libvirt/whonix_gateway.xml"
   #elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      #source_xml="$WHONIX_SOURCE_FOLDER/libvirt/whonix_workstation.xml"
      #temp_xml="$WHONIX_BINARY/temp_libvirt/whonix_workstation.xml"
   #else
      #bug "${red}${bold}ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!${reset}"
   #fi

   #if [ ! "$whonix_build_script_no_validate_libvirt_xml" = "1" ]; then
      #if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
         #sudo -u "$user_name" virt-xml-validate "$WHONIX_SOURCE_FOLDER/libvirt/whonix_network.xml"
      #fi
      #sudo -u "$user_name" virt-xml-validate "$source_xml"
   #fi

   #if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      #sudo -u "$user_name" cp "$WHONIX_SOURCE_FOLDER/libvirt/whonix_network.xml" "$WHONIX_BINARY/temp_libvirt/"
   #fi
   #sudo -u "$user_name" cp "$source_xml" "$temp_xml"

   ## Searching for:
   ## <source file='/var/lib/libvirt/images/Whonix-Gateway.qcow2'/>
   #[ -n "$vm_source_image" ] || vm_source_image="$(grep -oP "(?<=<source file=').*(?='/>)" "$source_xml")"
   ## Example vm_source_image:
   ## /var/lib/libvirt/images/Whonix-Gateway.qcow2

   #local temp new
   #temp="<source file='$vm_source_image'/>"
   #temp=$(echo "$temp" | sed 's_/_\\/_g')
   #new="<source file='$binary_image_qcow2'/>"
   #new=$(echo "$new" | sed 's_/_\\/_g')

   #sed -i "s/$temp/$new/g" "$temp_xml"

## {{ Write to tty1. Using simple lock mechanism so messages from "write" do not get mixed up.
output_write_to_tty() {
   trap "error_handler" ERR

   local lockfile
   lockfile="/var/run/msgcollector/$who_ami/write_lock"

   (
      trap "error_handler" ERR

      ## Use flock to wait up to 60 seconds to acquire an exclusive lock.
      ## fd 200, see man flock
      flock --wait 60 --exclusive 200

      echo "${1+"$@"}
$feel_free_to_press_enter_msg" | write user tty1 2>/dev/null || true

      ## Hold the write lock up to 10 seconds.
      sleep 10 &
      wait "$!"

   ) 200>"$lockfile" &
   ## fd 200, see man flock
}
## }}

override_dh_installchangelogs:
	$(CURDIR)/make-helper.bsh uch
	dh_installchangelogs debian/changelog.upstream

whonix_build_apt_sources_mirror="$(grep -oP "(?<=deb ).*(?= "$whonix_build_apt_stable_release" )" "$whonix_build_sources_list")"

   ## Explicitly set access time, so we end up with a deterministic debian.tar.gz file.
   shopt -s globstar dotglob
   touch -t "201308151102.35" ./debian
   touch -t "201308151102.35" ./debian/**
   shopt -u globstar dotglob

   ## --rootcmd as per https://wiki.debian.org/ReproducibleBuilds#How_to_build_a_deb_using_faketime
   ##
   ## -p (**-p**sign-command) is understood by dpkg-buildpackage.
   ## See also man dpkg-buildpackage.
   ##
   ## -sa is understood by dpkg-buildpackage, it forces the inclusion of the original source
   ## See also http://www.debian.org/doc/manuals/maint-guide/upload.en.html.

   #true "${cyan}$BASH_SOURCE INFO: Importing .dsc file... ${reset}"
   #for file_name in "$WHONIX_SOURCE_FOLDER/packages/"*".dsc"; do
      #sudo -E -u "$user_name" \
         #reprepro \
            #-V \
            #-V \
            #$WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            #includedsc "$WHONIX_BUILD_APT_CODENAME" "$file_name"
   #done
   #true "${cyan}$BASH_SOURCE INFO: Done, imported .dsc file. ${reset}"

   #true "${cyan}$BASH_SOURCE INFO: Importing .changes file... ${reset}"
   #for file_name in "$WHONIX_SOURCE_FOLDER/packages/"*".changes"; do
      #sudo -E -u "$user_name" \
         #reprepro \
            #-V \
            #-V \
            #$WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            #--ignore=wrongdistribution \
            #include "$WHONIX_BUILD_APT_CODENAME" "$file_name"
   #done
   #true "${cyan}$BASH_SOURCE INFO: Done, imported .changes file. ${reset}"

   ## Debugging.
   #true "${cyan}$BASH_SOURCE INFO: Displaying sha512sum of $WHONIX_APT_REPOSITORY_FOLDER/pool/**... ${reset}"
   #shopt -s globstar dotglob
   ## "|| true", because "sha512sum" exits 1, because "sha512sum: [...]: Is a directory".
   #sha512sum "$WHONIX_APT_REPOSITORY_FOLDER/pool/"** || true
   #shopt -u globstar dotglob
   #true "${cyan}$BASH_SOURCE INFO: Done, displayed sha512sums. ${reset}"

   if [ "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN" = "" ]; then
      error "Variable WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN is empty!"
   fi

   apt_get_gpgv_opts+=" -o Dir::Bin::gpg=$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN "
   export apt_get_gpgv_opts

   rm --force "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
   touch "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"

   if [ "$WHONIX_BUILD_APT_GET_GPGV_LOG" = "" ]; then
      error "Variable WHONIX_BUILD_APT_GET_GPGV_LOG is empty!"
   fi

   rm --force "$WHONIX_BUILD_APT_GET_GPGV_LOG"
   touch "$WHONIX_BUILD_APT_GET_GPGV_LOG"

   ## apt-get calls gpgv (this gpgv wrapper) with --status-fd 3. We redirect
   ## a copy of file descriptor 3 to the log.
   ## Variable WHONIX_BUILD_APT_GET_GPGV_LOG gets set and exported in help-steps/variables.
   echo '#!/bin/bash
gpgv ${1+"$@"} 3> >(tee --append "$WHONIX_BUILD_APT_GET_GPGV_LOG" >&3)
echo "-----" >> "$WHONIX_BUILD_APT_GET_GPGV_LOG"' | tee "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN" >/dev/null

   chmod +x "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"

aptgetgpgvparsetmp() {
   errorhandlersetup "errorhandlergeneral" ERR INT TERM

   local gpg_log
   gpg_log="$(cat "$WHONIX_BUILD_APT_GET_GPGV_LOG")" || true
   if [ "$gpg_log" = "" ]; then
      true "${red}${bold}ERROR: variable gpg_log is empty!${reset}"
      error "See above!"
      return 0
   fi

   local aptgetgpgvgrepbadsigpattern
   aptgetgpgvgrepbadsigpattern="BADSIG\|EXPSIG\|EXPKEYSIG\|REVKEYSIG\|ERRSIG"

   if echo "$gpg_log" | grep -i -q "$aptgetgpgvgrepbadsigpattern" ; then
      true "${red}${bold}ERROR: ${red}${bold}apt-get: error occurred during the signature verification!${reset}"
      error "See above!"
      return 0
   fi
}

   rm --force "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
   rm --force "$WHONIX_BUILD_APT_GET_GPGV_LOG"
