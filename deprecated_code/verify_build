#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## Usage:
## From Whonix Source Code Folder...
##     sudo ./release/verify_build --tor-gateway
##     sudo ./release/verify_build --tor-workstation

[ -o xtrace ]
## returns:
## - 0, if -x is set
## - 1, if -x is not set
MINUS_X_SET="$?"

set -x

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$MYDIR"

source ../../../help-steps/pre
source ../../../help-steps/variables

## NOTE:
## - Initially this was an attempt to verify an image against Debian's APT
##   repository. That is a sink hole.
## - This script is no longer under development.
## - A more realistic attempt to implement verifiable builds can be found in
##   the compare_images script.

## TODO:
## - Better way to verify symlinks. Parse postinst scripts instead.
## - Check the dpkg status file if it contains all packages and their dependencies of those as claimed
##   in <whonix source code>/debian/control and <whonix source code>/grml_packages.
## - Test with a modified symlink within the image or debian verification folder.
## - Test with a modified checksum within the image or debian verification folder.
## - Recommended exercise: use your own variables to check if really no file was forgotten.
## - bootloader: Edwin said "I think it is based on /usr/lib/grub/i386-pc/boot.img, but with some offsets adjusted."

## TODO lower priority:
## - Older packages can still be downloaded http://snapshot.debian.org/. Use it so verification still works long time after release.
## - /home/user/whonix_binary/verification/Whonix-Workstation.ovf has to be manually audited.

## Related links:
## - https://wiki.debian.org/SecureApt#How_to_manually_check_for_package.27s_integrity

## TODO: Read which version to check or filename from command line?
anon_dist_build_version="137adretemp"

WHONIX_BUILD_VERIFY_OLD_PWD="$PWD"

## Default to "no mismatch found" (0) and and increase for every mismatch found.
WHONIX_BUILD_VERIFY_MISMATCH="0"

## Enable (1) or disable (0) debug_echo's.
debug="0"

errorhandlerunmount_verify_build() {
   ## Get out of this folder, so unmounting will work.
   cd "$WHONIX_BUILD_VERIFY_OLD_PWD"

   errorhandlerunmount
}

trap "errorhandlerunmount_verify_build" ERR INT TERM

debug_echo() {
   if [ "$debug" = 1 ]; then
      echo "$*"
   fi
}

preparation() {
   trap "errorhandlergeneral" ERR INT TERM

   temp_folder="$WHONIX_BINARY/verification"
   whonix_source="$temp_folder/Whonix-$anon_dist_build_version"

   sudo -u "$user_name" mkdir --parents "$temp_folder"
   sudo -u "$user_name" mkdir --parents "$temp_folder/status"

   if [ ! -f "$temp_folder/status/whonix_source_code_copied" ]; then
      true "${bold}${cyan}INFO: Making a copy of Whonix source code, which we will use for verification... ${reset}"
      sudo -u "$user_name" cp -r "$WHONIX_SOURCE_FOLDER" "$whonix_source"
      sudo -u "$user_name" touch "$temp_folder/status/whonix_source_code_copied"
   else
      true "${bold}${cyan}INFO: We already have a copy of Whonix source code. ${reset}"
   fi

   true "${bold}${cyan}INFO: Get into snapshot of Whonix source code... ${reset}"
   cd "$whonix_source"

   true "${bold}${cyan}INFO: Git reset --hard uncommitted changes, so git checkout will work. \
(This is useful in case you tweaked the verification script without committing your changes. Feel free to comment this out.) ${reset}"
   sudo -u "$user_name" git reset --hard

   true "${bold}${cyan}INFO: Git OpenPGP verify the Whonix version we want to audit... (Feel free to comment this out.) ${reset}"
   sudo -u "$user_name" git tag -v "$anon_dist_build_version"

   true "${bold}${cyan}INFO: Git checkout the Whonix version we want to audit... ${reset}"
   sudo -u "$user_name" git checkout "$anon_dist_build_version"

   true "${bold}${cyan}INFO: Get into the verification folder, so \"apt-get download\" stores its downloads there.... ${reset}"
   cd "$temp_folder"

   declare -A -g remembered_file

   declare -A -g pkg_name
   declare -A -g pkg_vers_with
   declare -A -g pkg_vers_without
   declare -A -g pkg_arch
   declare -A -g pkg_bp

   ## Enable apt-cacher-ng.
   export http_proxy="http://127.0.0.1:3142"

   ## TODO: Fails with Whonix apt repository enabled, because of a bug in apt-cacher-ng. Contacted author.
   #apt-get update

   ## Disable apt-cacher-ng.
   unset http_proxy

   ## export, so help-steps/(un)mount-raw opens this one.
   export WHONIX_BUILD_MOUNT_RAW_FILE="$temp_folder/$VMNAME-$anon_dist_build_version.raw"

   if [ -f "$WHONIX_BUILD_MOUNT_RAW_FILE" ]; then
      true "${bold}${cyan}INFO: Unpacking .ova not required, .raw already exists, skipping. ${reset}"
   else
      ova="$WHONIX_BINARY/$VMNAME-$anon_dist_build_version.ova"
      if [ ! -f "$ova" ]; then
         error "${red}${bold}ERROR: "$ova" does not exist. ${reset}"
      else
         true "${bold}${cyan}INFO: Unpacking .ova... ${reset}"
         sudo -u "$user_name" tar -xvf "$ova"
         true "${bold}${cyan}INFO: Unpacked .ova. ${reset}"
      fi
   fi

   vmdk="$temp_folder/$VMNAME-$anon_dist_build_version-disk1.vmdk"

   if [ ! -f "$vmdk" ]; then
      error "${red}${bold}ERROR: "$vmdk" does not exist. ${reset}"
   fi

   if [ -f "$WHONIX_BUILD_MOUNT_RAW_FILE" ]; then
      true "${bold}${cyan}INFO: Converting .vmdk to .raw not required, already done, skipping. ${reset}"
   else
      ## Convert .vmdk to .raw, since there is no Free Software for mounting .vmdk using command line.
      true "${bold}${cyan}INFO: Converting vmdk to raw... ${reset}"
      sudo -u "$user_name" qemu-img convert "$vmdk" -O raw "$WHONIX_BUILD_MOUNT_RAW_FILE"
      true "${bold}${cyan}INFO: Converted vmdk to raw. ${reset}"
   fi

   ## Mount $WHONIX_BUILD_MOUNT_RAW_FILE
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/mount-raw
}

verify_whonix_source_files_helper() {
   trap "errorhandlerunmount_verify_build" ERR INT TERM

   local i

   ## Setting +x because the for loops otherwise causes too much output.
   maybe_set_plus_x

   while read i; do
      if [ -d "$i" ]; then
         continue
      fi
      local base_name="${i##*/}"
      if [ "$base_name" = ".directory" ]; then
         echo "${bold}${cyan}INFO: skipping to diff $i. ${reset}"
         continue
      fi
      local absolute_file_name="${i#"$1"}"
      local chroot_file="$CHROOT_FOLDER/$absolute_file_name"

      debug_echo "${cyan}INFO${reset}: Diffing original \"$i\" with \"$chroot_file\" (absolute_file_name: \"$absolute_file_name\")..."

      local diff_exit_code="0"
      diff "$i" "$chroot_file" || { local diff_exit_code="$?" ; true; };

      if [ "$diff_exit_code" = "0" ]; then
         remembered_file[$absolute_file_name]="0"
      else
         echo "${red}${bold}ERROR: Diff returned "$diff_exit_code" for "$chroot_file"...${reset}"
         WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
         remembered_file[$absolute_file_name]="1"
      fi
   done < <(find "$1")

   set -x
}

verify_whonix_source_files() {
   trap "errorhandlerunmount_verify_build" ERR INT TERM

   if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      verify_whonix_source_files_helper "$whonix_source/whonix_gateway"
      verify_whonix_source_files_helper "$whonix_source/whonix_shared"
   elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      verify_whonix_source_files_helper "$whonix_source/whonix_workstation"
      verify_whonix_source_files_helper "$whonix_source/whonix_shared"
   else
      bug "${red}${bold}ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!${reset}"
   fi
}

parse_dpkg_status_file() {
   trap "errorhandlerunmount_verify_build" ERR INT TERM

   ## Check which packages are claimed to be installed within the build.
   local dpkg_status_folder="$CHROOT_FOLDER/var/lib/dpkg"

   echo "${cyan}${bold}$BASH_SOURCE INFO: Parsing $dpkg_status_folder... ${reset}"

   local i=0

   local package status arch version_with bp

   maybe_set_plus_x

   ## TODO:
   ## Prepare a dpkg status file which includes malformed content,
   ## such as `$(echo a)` to check if no code gets executed.

   while read -r package status arch version_with bp; do
      i="$(expr "$i" + "1")"

      local status_second_char="${status:1:1}"

      if [ "$status_second_char" = "i" ]; then
         ## Ok.
         true
      else
         debug_echo "${cyan}${bold}$BASH_SOURCE INFO: $i Skipping $package | $version_with | $arch | $status | $bp because status is $status."
         continue
      fi

      ## Remove epoch, i.e. "1:", "2:", etc. from version number.
      local version_second_char="${version_with:1:1}"
      if [ "$version_second_char" = ":" ] ;then
         local version_without="$(echo "$version_with" | awk -F ":" '{ print $2 }')"
      else
         local version_without="$version_with"
      fi

      local first_six_chars="${package:0:6}"
      if [ "${first_six_chars,,}" = "whonix" ]; then
         ## Files coming with Whonix have already been checked against Whonix source code in function verify_whonix_source_files.
         debug_echo "${cyan}${bold}$BASH_SOURCE INFO $i: Skipping $package, because it begins with \"whonix\". ${reset}"
         continue
      fi

      debug_echo "${cyan}$BASH_SOURCE INFO: $i Adding package: $package | $version_without | $arch | $status | $bp | to the list of packages to be audited. ${reset}"

      pkg_name[$package]="$package"
      pkg_arch[$package]="$arch"
      pkg_vers_with[$package]="$version_with"
      pkg_vers_without[$package]="$version_without"
      pkg_bp[$package]="$bp"

   done < <(dpkg-query --admindir="$dpkg_status_folder" --showformat="\${Package}\t\${db:Status-Abbrev}\t\${Architecture}\t\${Version}\t\${binary:Package}\n" --show \*)

   set -x
}

download_packages() {
   trap "errorhandlerunmount_verify_build" ERR INT TERM

   ## We need to build a long line with all packages.
   ## Otherwise, running `apt-get download` with only one package by line over and over again would takes ages.

   maybe_set_plus_x

   for pkg in "${pkg_name[@]}"; do
      local status_file="$temp_folder/status/${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}_extracted"

      if [ -f "$status_file" ]; then
         continue
      fi

      local pkg_list="$pkg_list $pkg=${pkg_vers_with[$pkg]}"
   done

   set -x

   ## Enable apt-cacher-ng.
   export http_proxy="http://127.0.0.1:3142"

   ## TODO: Does this use verification? Temporarily remove archive key to see if verification would fail.
   ## TODO: Since we can not use quotes around $pkg_list we should check that nothing like $(echo test) can be executed.
   ##       For testing, change the path of the dpkg status file to a file in your homefolder and prepare it with things
   ##       like $(echo test).
   if [ "$pkg_list" = "" ]; then
      true "${cyan}${bold}$BASH_SOURCE INFO: Already downloaded all required packages. ${reset}"
   else
      sudo -E -u "$user_name" \
         apt-get download $pkg_list

      true "${cyan}${bold}$BASH_SOURCE INFO: apt_get_exit_code: $? ${reset}"
   fi

   ## TODO: Use snapshot.debian.org?
   ## E: Version '3.8.5-1' for 'logrotate' was not found
   ## E: Version '1.3.0-1' for 'python-six' was not found
   ## E: Version '1.3.0-1' for 'libflac8' was not found
   ##
   ## 137adretemp:
   ## http://snapshot.debian.org/archive/debian/?year=2013;month=9  2013-09-13 03:54:37
   ## deb http://snapshot.debian.org/archive/debian/20130913T035437Z/ testing main

   ## Disable apt-cacher-ng.
   unset http_proxy
}

extract_packages() {
   trap "errorhandlerunmount_verify_build" ERR INT TERM

   true "${cyan}${bold}$BASH_SOURCE INFO: Extracting packages... ${reset}"

   maybe_set_plus_x

   for pkg in "${pkg_name[@]}"; do

      local status_file="$temp_folder/status/${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}_extracted"

      if [ -f "$status_file" ]; then
         continue
      fi

      ## Extract the package including the DEBIAN folder.

      local extract_folder="$temp_folder/${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}"

      sudo -u "$user_name" \
         dpkg-deb \
            --raw-extract \
            "${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}.deb" \
            "$extract_folder"

      sudo -u "$user_name" \
         touch "$status_file"

   done

   set -x

   true "${cyan}${bold}$BASH_SOURCE INFO: Extracted packages. ${reset}"
}

verify_packages() {
   trap "errorhandlerunmount_verify_build" ERR INT TERM

   ## We don't use the DEBIAN/md5sums, because md5 is no longer considered safe. Maybe you
   ## consider it still safe enough, but I would like to dodge that discussion. Hopefully,
   ## you do agree, that it won't be safe in a few years? For that reason, we are using
   ## sha512. Note, DEBIAN/md5sums is safe, with the threat model of apt-get's in mind. When
   ## apt-get downloads packages, the repository release file is signed with a stronger hash
   ## and DEBIAN/md5sums is only used to verify if the individual files are intact. But what
   ## we do here is different. The md5sums created from files of the untrusted system could
   ## be maliciously prepared to contain a backdoor and a md5 hash collisions. Therefore
   ## we rather build a sha512 checksum and compare it with a sha512 checksum we created
   ## ourselves. If Debian were to ship a DEBIAN/sha512sums (or sha256sums) file some day,
   ## we could of course use that file instead.

   true "${cyan}${bold}$BASH_SOURCE INFO: Verifying packages... ${reset}"

   maybe_set_plus_x

   for pkg in "${pkg_name[@]}"; do

      local extract_folder="$temp_folder/${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}"
      local i

      while read i; do
         if [ -d "$i" ]; then
            continue
         fi
         local base_name="${i##*/}"
         local dir_name="${i%/*}"
         local folder_name=${dir_name##*/}

         if [ "$base_name" = "control" ]; then
            continue
         fi

         if [ "$folder_name" = "DEBIAN" ]; then
            local absolute_file_name="/var/lib/dpkg/info/${pkg_bp[$pkg]}.$base_name"
            local chroot_file="$CHROOT_FOLDER/$absolute_file_name"
         else
            local absolute_file_name="${i#"$extract_folder"}"
            local chroot_file="$CHROOT_FOLDER/$absolute_file_name"
         fi

         ## Fallbacks.
         local fail="1"
         local symlink="0"
         local i_link="no symlink"
         local chroot_file_link="no symlink"

         ## Check if $i is a symlink.
         if [ -h "$i" ]; then
            local symlink="1"
            ## Not using readlink with -f, so we can compare the relative links.
            local i_link="$(readlink "$i")"
         fi

         ## Check if $chroot_file is a symlink.
         if [ -h "$chroot_file" ]; then
            local symlink="1"
            ## Not using readlink with -f, so we can compare the relative links.
            local chroot_file_link="$(readlink "$chroot_file")"
         fi

         if [ "$symlink" = "1" ]; then
            debug_echo "${cyan}INFO${reset}: comparing symlink of \"$i\" with \"$chroot_file\"... (absolute_file_name: \"$absolute_file_name\")"
            if [ "$i_link" = "$chroot_file_link" ]; then
               ## Ok.
               local fail="0"
               debug_echo "${cyan}INFO${reset}: ok, symlink of \"$i\" matches \"$chroot_file\"."
            else
               local fail="1"
               echo "${red}${bold}ERROR: Mismatch in package \"${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}\". \"$chroot_file\" should symlink to \"$i_link\" but symlinks to \"$chroot_file_link\". ${reset}"
            fi
         else
            debug_echo "${cyan}INFO${reset}: comparing checksum of \"$i\" with \"$chroot_file\"... (absolute_file_name: \"$absolute_file_name\")"

            local a="$(sha512sum "$i")"
            local checksum_pkg
            read -r checksum_pkg _ <<< "$a"

            local b="$(sha512sum "$chroot_file")"
            local checksum_image
            read -r checksum_image _ <<< "$b"

            if [ "$checksum_pkg" = "$checksum_image" ]; then
               local fail="0"
            else
               local fail="1"
               echo "${red}${bold}ERROR: Mismatch in package \"${pkg}_${pkg_vers_without[$pkg]}_${pkg_arch[$pkg]}\". checksum of \"$chroot_file\" should be \"$checksum_pkg\" but is checksum of \"$i\" is \"$checksum_image\". ${reset}"
            fi
         fi

         if [ "$fail" = "0" ]; then
            remembered_file[$absolute_file_name]="0"
         else
            WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
            remembered_file[$absolute_file_name]="1"
         fi

      done < <(find "$extract_folder")

   done

   set -x

   true "${cyan}${bold}$BASH_SOURCE INFO: Verified packages. (This does indicate neither failure nor success. Results at the end.) ${reset}"
}

forgotten_files() {
   trap "errorhandlerunmount_verify_build" ERR INT TERM

   local folder="$CHROOT_FOLDER"

   local i
   local j="0"

   maybe_set_plus_x

   while read i; do
      local j="$(expr "$j" + "1")"

      if [ -d "$i" ]; then
         continue
      fi
      local base_name="${i##*/}"
      local dir_name="${i%/*}"
      ## Remove for example /home/user/whonix_binary/Whonix-Gateway_image
      local dir_name_absolute="${dir_name#"$CHROOT_FOLDER"}"
      #local folder_name=${dir_name##*/}

      local absolute_file_name="${i#"$folder"}"
      local chroot_file="$CHROOT_FOLDER/$absolute_file_name"

      #debug_echo "${cyan}INFO${reset}: i: $i absolute_file_name: $absolute_file_name"

      if [ "${remembered_file[$absolute_file_name]}" = "0" ]; then
         debug_echo "${cyan}INFO: $j Already known as good file i: $i || absolute_file_name: $absolute_file_name ${reset}"
         continue
      elif [ "${remembered_file[$absolute_file_name]}" = "1" ]; then
         debug_echo "${cyan}INFO: $j Already known as bad file i: $i || absolute_file_name: $absolute_file_name ${reset}"
         continue
      else
         ## Fallbacks.
         local i_link="no symlink"
         local i_link_f="no symlink"

         ## Check if $i is a symlink.
         if [ -h "$i" ]; then
            ## Symlink found...

            ## Not using readlink with -f, so we can compare the relative links.
            local i_link="$(readlink "$i")"

            ## readlink -f returns a absolute file name.
            local i_link_f="$(readlink -f "$i")"
            ## Remove for example /home/user/whonix_binary/Whonix-Gateway_image from the symlink.
            local i_link_f="${i_link_f#"$CHROOT_FOLDER"}"

            if [ "${remembered_file[$i_link]}" = "1" ]; then
               debug_echo "${bold}${red}ERROR: $j forgotten file i: $i symlinks to known bad file (i_link): $i_link || absolute_file_name: $absolute_file_name ${reset}"
               WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
               remembered_file[$absolute_file_name]="1"
               continue
            fi

            if [ "${remembered_file[$i_link_f]}" = "1" ]; then
               debug_echo "${bold}${red}ERROR: $j forgotten file i: $i symlinks to known bad file (i_link_f): $i_link_f || absolute_file_name: $absolute_file_name ${reset}"
               WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
               remembered_file[$absolute_file_name]="1"
               continue
            fi

            if [ "${remembered_file[$i_link]}" = "0" ]; then
               debug_echo "${cyan}INFO: $j forgotten file i: $i symlinks to known good file (i_link): $i_link || absolute_file_name: $absolute_file_name ${reset}"
               remembered_file[$absolute_file_name]="0"
               continue
            fi

            if [ "${remembered_file[$i_link_f]}" = "0" ]; then
               debug_echo "${cyan}INFO: $j forgotten file i: $i symlinks to known good file (i_link_f): $i_link_f || absolute_file_name: $absolute_file_name ${reset}"
               remembered_file[$absolute_file_name]="0"
               continue
            fi

            echo "${bold}${red}ERROR: $j forgotten file i: $i symlinks to forgotten i_link: $i_link || i_link_f: $i_link_f || absolute_file_name: $absolute_file_name ${reset}"
            WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
            remembered_file[$absolute_file_name]="1"
            continue
         else
            ## No symlink found...

            ## Check if file is empty, to catch empty log files.
            if [[ -s "$i" ]]; then
               ## Non-empty file.

               if [[ "$dir_name_absolute" == "/etc/apparmor.d/local" ]]; then
                  local apparmor_text="# Site-specific additions and overrides for ${base_name}.
# For more details, please see /etc/apparmor.d/local/README."
                  local file_content="$(cat "$i")"
                  if [[ "$file_content" == "$apparmor_text" ]]; then
                     debug_echo "${cyan}INFO: $j forgotten file i: $i contains only local apparmor default comment || absolute_file_name: $absolute_file_name ${reset}"
                     remembered_file[$absolute_file_name]="0"
                     continue
                  else
                     echo "${bold}${red}ERROR: $j forgotten file i: $i || absolute_file_name: $absolute_file_name || base_name: $base_name || file_content: $file_content  ${reset}"
                     WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
                     remembered_file[$absolute_file_name]="1"
                     continue
                  fi
               fi

               ## Files in /boot/grub are copied from /usr/lib/grub/i386-pc.
               if [[ "$dir_name_absolute" == "/boot/grub" ]]; then
                  ## For example i: /boot/grub/video_fb.mod

                  local grub_file="/usr/lib/grub/i386-pc/$base_name"

                  local a="$(sha512sum "$grub_file")"
                  local checksum_pkg
                  read -r checksum_pkg _ <<< "$a"

                  local b="$(sha512sum "$i")"
                  local checksum_image
                  read -r checksum_image _ <<< "$b"

                  if [ "$checksum_pkg" = "$checksum_image" ]; then
                     debug_echo "${cyan}INFO: $j forgotten file i: $i matches grub_file: $grub_file || absolute_file_name: $absolute_file_name ${reset}"
                     remembered_file[$absolute_file_name]="0"
                     continue
                  else
                     echo "${bold}${red}ERROR: $j forgotten file i: $i does not match grub_file: $grub_file || absolute_file_name: $absolute_file_name ${reset}"
                     WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
                     remembered_file[$absolute_file_name]="1"
                     continue
                  fi
               fi

               echo "${bold}${red}ERROR: $j forgotten file i: $i || absolute_file_name: $absolute_file_name ${reset}"
               WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
               remembered_file[$absolute_file_name]="1"
               continue
            else
               ## Empty file.
               debug_echo "${cyan}INFO: $j forgotten file i: $i is empty || absolute_file_name: $absolute_file_name ${reset}"
               remembered_file[$absolute_file_name]="0"
               continue
            fi

         fi

      fi
   done < <(find "$folder")

   set -x
}

end() {
   ## Get out of this folder, so unmounting will work.
   cd "$WHONIX_BUILD_VERIFY_OLD_PWD"

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-raw

   if [ "$WHONIX_BUILD_VERIFY_MISMATCH" = "0" ]; then
      ## ok, no mismatch
      true "${green}${bold}$BASH_SOURCE INFO: No mismatch found. ${reset}"
      exit 0
   else
      true "${red}${bold}$BASH_SOURCE ERROR: $WHONIX_BUILD_VERIFY_MISMATCH files mismatched! See the red messages above to find out which files. ${reset}"
      exit 1
   fi
}

preparation
verify_whonix_source_files
parse_dpkg_status_file
download_packages
extract_packages
verify_packages
forgotten_files
end
